/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Vault {
  export type RewardStruct = {
    share: PromiseOrValue<BigNumberish>;
    pending: PromiseOrValue<BigNumberish>;
  };

  export type RewardStructOutput = [BigNumber, BigNumber] & {
    share: BigNumber;
    pending: BigNumber;
  };

  export type UserInfoStruct = {
    amount: PromiseOrValue<BigNumberish>;
    crv: Vault.RewardStruct;
    cvx: Vault.RewardStruct;
  };

  export type UserInfoStructOutput = [
    BigNumber,
    Vault.RewardStructOutput,
    Vault.RewardStructOutput
  ] & {
    amount: BigNumber;
    crv: Vault.RewardStructOutput;
    cvx: Vault.RewardStructOutput;
  };
}

export interface VaultInterface extends utils.Interface {
  functions: {
    "BASE_REWARD_POOL()": FunctionFragment;
    "BOOSTER()": FunctionFragment;
    "CRV()": FunctionFragment;
    "CVX()": FunctionFragment;
    "LP()": FunctionFragment;
    "PID()": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "claim()": FunctionFragment;
    "crvAmountPerShare()": FunctionFragment;
    "cvxAmountPerShare()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "depositAmountTotal()": FunctionFragment;
    "getPendingRewards((uint256,(uint256,uint256),(uint256,uint256)))": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userInfo(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BASE_REWARD_POOL"
      | "BOOSTER"
      | "CRV"
      | "CVX"
      | "LP"
      | "PID"
      | "acceptOwnership"
      | "claim"
      | "crvAmountPerShare"
      | "cvxAmountPerShare"
      | "deposit"
      | "depositAmountTotal"
      | "getPendingRewards"
      | "owner"
      | "pendingOwner"
      | "renounceOwnership"
      | "transferOwnership"
      | "userInfo"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BASE_REWARD_POOL",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "BOOSTER", values?: undefined): string;
  encodeFunctionData(functionFragment: "CRV", values?: undefined): string;
  encodeFunctionData(functionFragment: "CVX", values?: undefined): string;
  encodeFunctionData(functionFragment: "LP", values?: undefined): string;
  encodeFunctionData(functionFragment: "PID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "crvAmountPerShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cvxAmountPerShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAmountTotal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingRewards",
    values: [Vault.UserInfoStruct]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASE_REWARD_POOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "BOOSTER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "CRV", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "CVX", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "LP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "crvAmountPerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cvxAmountPerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositAmountTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Claim(address,uint256,uint256)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "OwnershipTransferStarted(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface ClaimEventObject {
  user: string;
  crvReward: BigNumber;
  cvxReward: BigNumber;
}
export type ClaimEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ClaimEventObject
>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface DepositEventObject {
  user: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface OwnershipTransferStartedEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferStartedEvent = TypedEvent<
  [string, string],
  OwnershipTransferStartedEventObject
>;

export type OwnershipTransferStartedEventFilter =
  TypedEventFilter<OwnershipTransferStartedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface WithdrawEventObject {
  user: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface Vault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASE_REWARD_POOL(overrides?: CallOverrides): Promise<[string]>;

    BOOSTER(overrides?: CallOverrides): Promise<[string]>;

    CRV(overrides?: CallOverrides): Promise<[string]>;

    CVX(overrides?: CallOverrides): Promise<[string]>;

    LP(overrides?: CallOverrides): Promise<[string]>;

    PID(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    crvAmountPerShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    cvxAmountPerShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositAmountTotal(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPendingRewards(
      info: Vault.UserInfoStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { crvPending: BigNumber; cvxPending: BigNumber }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, Vault.RewardStructOutput, Vault.RewardStructOutput] & {
        amount: BigNumber;
        crv: Vault.RewardStructOutput;
        cvx: Vault.RewardStructOutput;
      }
    >;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  BASE_REWARD_POOL(overrides?: CallOverrides): Promise<string>;

  BOOSTER(overrides?: CallOverrides): Promise<string>;

  CRV(overrides?: CallOverrides): Promise<string>;

  CVX(overrides?: CallOverrides): Promise<string>;

  LP(overrides?: CallOverrides): Promise<string>;

  PID(overrides?: CallOverrides): Promise<BigNumber>;

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claim(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  crvAmountPerShare(overrides?: CallOverrides): Promise<BigNumber>;

  cvxAmountPerShare(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositAmountTotal(overrides?: CallOverrides): Promise<BigNumber>;

  getPendingRewards(
    info: Vault.UserInfoStruct,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { crvPending: BigNumber; cvxPending: BigNumber }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, Vault.RewardStructOutput, Vault.RewardStructOutput] & {
      amount: BigNumber;
      crv: Vault.RewardStructOutput;
      cvx: Vault.RewardStructOutput;
    }
  >;

  withdraw(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BASE_REWARD_POOL(overrides?: CallOverrides): Promise<string>;

    BOOSTER(overrides?: CallOverrides): Promise<string>;

    CRV(overrides?: CallOverrides): Promise<string>;

    CVX(overrides?: CallOverrides): Promise<string>;

    LP(overrides?: CallOverrides): Promise<string>;

    PID(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    claim(overrides?: CallOverrides): Promise<void>;

    crvAmountPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    cvxAmountPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositAmountTotal(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingRewards(
      info: Vault.UserInfoStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { crvPending: BigNumber; cvxPending: BigNumber }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    userInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, Vault.RewardStructOutput, Vault.RewardStructOutput] & {
        amount: BigNumber;
        crv: Vault.RewardStructOutput;
        cvx: Vault.RewardStructOutput;
      }
    >;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Claim(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      crvReward?: null,
      cvxReward?: null
    ): ClaimEventFilter;
    Claim(
      user?: PromiseOrValue<string> | null,
      crvReward?: null,
      cvxReward?: null
    ): ClaimEventFilter;

    "Deposit(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): DepositEventFilter;

    "OwnershipTransferStarted(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferStartedEventFilter;
    OwnershipTransferStarted(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferStartedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Withdraw(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    BASE_REWARD_POOL(overrides?: CallOverrides): Promise<BigNumber>;

    BOOSTER(overrides?: CallOverrides): Promise<BigNumber>;

    CRV(overrides?: CallOverrides): Promise<BigNumber>;

    CVX(overrides?: CallOverrides): Promise<BigNumber>;

    LP(overrides?: CallOverrides): Promise<BigNumber>;

    PID(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    crvAmountPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    cvxAmountPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositAmountTotal(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingRewards(
      info: Vault.UserInfoStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASE_REWARD_POOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BOOSTER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CRV(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CVX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    crvAmountPerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cvxAmountPerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositAmountTotal(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingRewards(
      info: Vault.UserInfoStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
