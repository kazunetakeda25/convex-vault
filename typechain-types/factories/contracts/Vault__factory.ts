/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Vault, VaultInterface } from "../../contracts/Vault";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_crv",
        type: "address",
      },
      {
        internalType: "address",
        name: "_cvx",
        type: "address",
      },
      {
        internalType: "address",
        name: "_booster",
        type: "address",
      },
      {
        internalType: "address",
        name: "_lp",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_pid",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "crvReward",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "cvxReward",
        type: "uint256",
      },
    ],
    name: "Claim",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferStarted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdraw",
    type: "event",
  },
  {
    inputs: [],
    name: "BASE_REWARD_POOL",
    outputs: [
      {
        internalType: "contract IBaseRewardPool",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BOOSTER",
    outputs: [
      {
        internalType: "contract IBooster",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "CRV",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "CVX",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "LP",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PID",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "crvAmountPerShare",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "cvxAmountPerShare",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "depositAmountTotal",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "share",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "pending",
                type: "uint256",
              },
            ],
            internalType: "struct Vault.Reward",
            name: "crv",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "share",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "pending",
                type: "uint256",
              },
            ],
            internalType: "struct Vault.Reward",
            name: "cvx",
            type: "tuple",
          },
        ],
        internalType: "struct Vault.UserInfo",
        name: "info",
        type: "tuple",
      },
    ],
    name: "getPendingRewards",
    outputs: [
      {
        internalType: "uint256",
        name: "crvPending",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "cvxPending",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "userInfo",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "share",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "pending",
            type: "uint256",
          },
        ],
        internalType: "struct Vault.Reward",
        name: "crv",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "share",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "pending",
            type: "uint256",
          },
        ],
        internalType: "struct Vault.Reward",
        name: "cvx",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6101206040523480156200001257600080fd5b5060405162001fb438038062001fb48339810160408190526200003591620001f6565b62000040336200016b565b60016002556001600160a01b0385811660a052848116608052831660c0819052604051631526fe2760e01b815260048101839052631526fe279060240160c060405180830381865afa1580156200009b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000c191906200026e565b606001516001600160a01b0390811660e052600380546001600160a01b03191684831690811790915561010083905260c05160405163095ea7b360e01b81529216600483015260001960248301529063095ea7b3906044016020604051808303816000875af115801562000139573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200015f919062000328565b5050505050506200034d565b600180546001600160a01b0319169055620001868162000189565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620001f157600080fd5b919050565b600080600080600060a086880312156200020f57600080fd5b6200021a86620001d9565b94506200022a60208701620001d9565b93506200023a60408701620001d9565b92506200024a60608701620001d9565b9150608086015190509295509295909350565b80518015158114620001f157600080fd5b600060c082840312156200028157600080fd5b60405160c081016001600160401b0381118282101715620002b257634e487b7160e01b600052604160045260246000fd5b604052620002c083620001d9565b8152620002d060208401620001d9565b6020820152620002e360408401620001d9565b6040820152620002f660608401620001d9565b60608201526200030960808401620001d9565b60808201526200031c60a084016200025d565b60a08201529392505050565b6000602082840312156200033b57600080fd5b62000346826200025d565b9392505050565b60805160a05160c05160e05161010051611bb262000402600039600081816102360152610d3c0152600081816101ea015281816111b0015261142a01526000818161029a0152610d700152600081816102e7015281816105ba015281816108b40152818161110c01528181611263015281816114eb015261166701526000818161027301528181610679015281816109730152818161104301528181611355015281816115b401526117440152611bb26000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c80638da5cb5b116100cd578063c89b9f0411610081578063e30c397811610066578063e30c397814610376578063ed07f36614610394578063f2fde38b1461039d57600080fd5b8063c89b9f0414610345578063d28bba5e1461034e57600080fd5b8063a3541ea2116100b2578063a3541ea214610309578063b6b55f2514610312578063b6fccf8a1461032557600080fd5b80638da5cb5b146102c4578063945c9142146102e257600080fd5b80635eaec0e411610124578063759cb53b11610109578063759cb53b1461026e57806375b0ffd11461029557806379ba5097146102bc57600080fd5b80635eaec0e414610231578063715018a61461026657600080fd5b80631959a002146101565780632e1a7d4d146101c85780634e71d92d146101dd5780635217e304146101e5575b600080fd5b6101b061016436600461192c565b6007602090815260009182526040918290208054835180850185526001830154815260028301548185015284518086019095526003830154855260049092015492840192909252909183565b6040516101bf93929190611969565b60405180910390f35b6101db6101d63660046119a0565b6103b0565b005b6101db6107de565b61020c7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101bf565b6102587f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016101bf565b6101db610a41565b61020c7f000000000000000000000000000000000000000000000000000000000000000081565b61020c7f000000000000000000000000000000000000000000000000000000000000000081565b6101db610a53565b60005473ffffffffffffffffffffffffffffffffffffffff1661020c565b61020c7f000000000000000000000000000000000000000000000000000000000000000081565b61025860055481565b6101db6103203660046119a0565b610b05565b60035461020c9073ffffffffffffffffffffffffffffffffffffffff1681565b61025860065481565b61036161035c366004611a2f565b610e33565b604080519283526020830191909152016101bf565b60015473ffffffffffffffffffffffffffffffffffffffff1661020c565b61025860045481565b6101db6103ab36600461192c565b610ee4565b6103b8610f94565b60008111610427576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f5661756c743a20496e76616c696420776974686472617720616d6f756e74000060448201526064015b60405180910390fd5b33600090815260076020526040902080548211156104a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f5661756c743a20496e76616c696420776974686472617720616d6f756e740000604482015260640161041e565b6104aa82611005565b60408051606081018252825481528151808301835260018401548152600284015460208281019190915280830191909152825180840184526003850154815260048501549181019190915291810191909152600090819061050a90610e33565b845491935091508403610547573360009081526007602052604081208181556001810182905560028101829055600381018290556004015561057f565b8383600001600082825461055b9190611aec565b90915550506005546001840155600060028401819055600654600385015560048401555b811561063e576040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018390527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a9059cbb906044016020604051808303816000875af1158015610618573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063c9190611b05565b505b80156106fd576040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a9059cbb906044016020604051808303816000875af11580156106d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fb9190611b05565b505b6003546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810186905273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb906044016020604051808303816000875af1158015610774573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107989190611b05565b5060405184815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a25050506107db6001600255565b50565b6107e6610f94565b6107ee61141c565b336000908152600760209081526040808320815160608101835281548152825180840184526001830154815260028301548186015281850152825180840184526003830154815260048301549481019490945291820192909252909190819061085690610e33565b60055460018601556000600286018190556006546003870155600486015590925090508115610938576040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018390527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a9059cbb906044016020604051808303816000875af1158015610912573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109369190611b05565b505b80156109f7576040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a9059cbb906044016020604051808303816000875af11580156109d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f59190611b05565b505b604080518381526020810183905233917f34fcbac0073d7c3d388e51312faf357774904998eeb8fca628b9e6f65ee1cbf7910160405180910390a2505050610a3f6001600255565b565b610a4961180a565b610a3f600061188b565b600154339073ffffffffffffffffffffffffffffffffffffffff168114610afc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f74207468652060448201527f6e6577206f776e65720000000000000000000000000000000000000000000000606482015260840161041e565b6107db8161188b565b610b0d610f94565b60008111610b77576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5661756c743a20496e76616c6964206465706f73697420616d6f756e74000000604482015260640161041e565b610b7f61141c565b336000908152600760205260408120805490918391839190610ba2908490611b27565b909155505060018101546005541115610c035760055460018201819055670de0b6b3a764000090610bd39080611aec565b8254610bdf9190611b3a565b610be99190611b51565b600282018054600090610bfd908490611b27565b90915550505b60038101546006541115610c5f5760065460038201819055670de0b6b3a764000090610c2f9080611aec565b8254610c3b9190611b3a565b610c459190611b51565b600482018054600090610c59908490611b27565b90915550505b81600454610c6d9190611b27565b60049081556003546040517f23b872dd00000000000000000000000000000000000000000000000000000000815233928101929092523060248301526044820184905273ffffffffffffffffffffffffffffffffffffffff16906323b872dd906064016020604051808303816000875af1158015610cef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d139190611b05565b506040517f43a0d0660000000000000000000000000000000000000000000000000000000081527f0000000000000000000000000000000000000000000000000000000000000000600482015260248101839052600160448201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906343a0d066906064016020604051808303816000875af1158015610dce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df29190611b05565b5060405182815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a2506107db6001600255565b6020808201519081015190516005546000911015610e8a57602083015151600554670de0b6b3a764000091610e6791611aec565b8451610e739190611b3a565b610e7d9190611b51565b610e879083611b27565b91505b506040820151602081015190516006541115610edf57604083015151600654670de0b6b3a764000091610ebc91611aec565b8451610ec89190611b3a565b610ed29190611b51565b610edc9082611b27565b90505b915091565b610eec61180a565b6001805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff00000000000000000000000000000000000000009091168117909155610f4f60005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6002805403610fff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161041e565b60028055565b6004546000036110125750565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa15801561109f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c39190611b8c565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015611153573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111779190611b8c565b6040517fc32e720200000000000000000000000000000000000000000000000000000000815260048101859052600160248201529091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063c32e7202906044016020604051808303816000875af115801561120e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112329190611b05565b506040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015281907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa1580156112bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e39190611b8c565b6112ed9190611aec565b905080156113255760045461130a670de0b6b3a764000083611b3a565b6113149190611b51565b6005546113219190611b27565b6005555b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015282907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa1580156113b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d59190611b8c565b6113df9190611aec565b91508115611417576004546113fc670de0b6b3a764000084611b3a565b6114069190611b51565b6006546114139190611b27565b6006555b505050565b60045460000361142857565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633d18b9126040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611495573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b99190611b05565b506040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015611547573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156b9190611b8c565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156115fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161f9190611b8c565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152909150829073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156116ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d29190611b8c565b6116dc9190611aec565b91508115611714576004546116f9670de0b6b3a764000084611b3a565b6117039190611b51565b6005546117109190611b27565b6005555b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015281907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa1580156117a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c49190611b8c565b6117ce9190611aec565b90508015611806576004546117eb670de0b6b3a764000083611b3a565b6117f59190611b51565b6006546118029190611b27565b6006555b5050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610a3f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161041e565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556107db816000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561193e57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461196257600080fd5b9392505050565b83815260a08101611987602083018580518252602090810151910152565b8251606083015260208301516080830152949350505050565b6000602082840312156119b257600080fd5b5035919050565b6000604082840312156119cb57600080fd5b6040516040810181811067ffffffffffffffff82111715611a15577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604052823581526020928301359281019290925250919050565b600060a08284031215611a4157600080fd5b6040516060810181811067ffffffffffffffff82111715611a8b577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405282358152611a9f84602085016119b9565b6020820152611ab184606085016119b9565b60408201529392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81810381811115611aff57611aff611abd565b92915050565b600060208284031215611b1757600080fd5b8151801515811461196257600080fd5b80820180821115611aff57611aff611abd565b8082028115828204841417611aff57611aff611abd565b600082611b87577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600060208284031215611b9e57600080fd5b505191905056fea164736f6c6343000815000a";

type VaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Vault__factory extends ContractFactory {
  constructor(...args: VaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _crv: PromiseOrValue<string>,
    _cvx: PromiseOrValue<string>,
    _booster: PromiseOrValue<string>,
    _lp: PromiseOrValue<string>,
    _pid: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Vault> {
    return super.deploy(
      _crv,
      _cvx,
      _booster,
      _lp,
      _pid,
      overrides || {}
    ) as Promise<Vault>;
  }
  override getDeployTransaction(
    _crv: PromiseOrValue<string>,
    _cvx: PromiseOrValue<string>,
    _booster: PromiseOrValue<string>,
    _lp: PromiseOrValue<string>,
    _pid: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _crv,
      _cvx,
      _booster,
      _lp,
      _pid,
      overrides || {}
    );
  }
  override attach(address: string): Vault {
    return super.attach(address) as Vault;
  }
  override connect(signer: Signer): Vault__factory {
    return super.connect(signer) as Vault__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VaultInterface {
    return new utils.Interface(_abi) as VaultInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Vault {
    return new Contract(address, _abi, signerOrProvider) as Vault;
  }
}
